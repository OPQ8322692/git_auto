{"name": "test_run[case1]", "status": "broken", "statusDetails": {"message": "pymysql.err.OperationalError: (1065, 'Query was empty')", "trace": "self = <data.test_excel_case.TestExcel object at 0x03EC59D0>\ncase = {'cookies': '', 'headers': '', 'status_code': 200.0, '前置条件': '', ...}\nget_token = {'hotline_id': '3402033689_0', 'wsf_user_token': '276e8195-8e71-4882-9a86-964849544a51'}\n\n    @pytest.mark.parametrize(\"case\",run_list)\n    def test_run(self,case,get_token):\n        #data_key = ExcelConfig.DataConfig()\n        url = case[data_key.url]\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exc = case[data_key.pre_exc]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        except_result = case[data_key.except_result]\n        actual_result = case[data_key.actual_result]\n        is_run = case[data_key.is_run]\n        headers = case[data_key.headers]\n        cookies = case[data_key.cookies]\n        code = case[data_key.code]\n        db_result = case[data_key.db_result]\n        #print(url)\n        #print(case_model)\n    \n        #1.判断headers是否存在，存在json转义，无需\n        # if headers:\n        #     header = json.load(headers)\n        # else:\n        #     header = headers\n        # #2、增加cookies\n        # if cookies:\n        #     cookie = json.loads(cookies)\n        # else:\n        #     cookie = cookies\n        #header = Base.json_parse(headers)\n        #cookie = Base.josn_parse(cookies)\n    \n        #1、验证前置条件\n        if pre_exc:\n            pass\n        #2、找到执行用例\n            #前置测试用例\n            pre_case = data_init.get_case_pre(pre_exc)\n            print(\"前置条件信息为：%s\"%pre_exc)\n            print(\"前置用例为：%s\"%pre_case)\n            pre_res = self.run_pre(pre_case,get_token)\n            print(\"执行前置用例结果为：%s\"%pre_res)\n            #print(\"执行前置用例body结果为：%s\"%pre_res[\"body\"][\"data\"][\"reOrderToken\"])\n            #替换\n            #params = Base.json_parse(params)\n            #print(\"将json中的null转换为字典格式：%s\"%params)\n            # 注意需要转换成字符串传参\n            #print(\"格式化字典参数是：\\\"%s\\\"\"%params)\n            #params1 = '\"'+str(params)+'\"'\n            #params = '\"{}\"'.format(str(params))\n            print(params)\n            headers,cookies,params = self.get_correlation(headers,cookies,params,pre_res)\n            #paramend = json.loads(params3)\n            print(\"替换后的参数是：%s\"%params)\n        # headers = Base.json_parse(headers)\n        # cookies = Base.json_parse(cookies)\n        # params = Base.json_parse(params)\n        # print(\"字典化参数为：%s\"%params)\n        #执行正常的测试用例\n        res = self.run_api(url=url,get_token=get_token,method=method,params_type=params_type,params=params,header=headers,cookies=get_token)\n        print(res)\n        #断言验证\n        #状态码，返回结果内容，数据库相关的结果的验证\n        #状态码\n        assert_util = AssertUtil()\n        assert_util.assert_code(int(res[\"code\"]),int(code))\n        #验证结果内容，包含，注意表格中要用单引号，因为返回的结果是字典类型\n        assert_util.assert_in_body(str(res[\"body\"]),str(except_result))\n        #数据库结果断言,应该要用if先判断表格是否有值 再执行\n        #初始化数据库\n        from common.Base import init_db\n        sql = init_db(\"db_pre\")\n        #查询sqp语句，excel定义好的\n>       db_res = sql.fetchone(db_result)\n\ntest_excel_case.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\MysqlUtil.py:24: in fetchone\n    self.cursor.execute(sql)\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\pymysql\\cursors.py:148: in execute\n    result = self._query(query)\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\pymysql\\cursors.py:310: in _query\n    conn.query(q)\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\pymysql\\connections.py:548: in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\pymysql\\connections.py:775: in _read_query_result\n    result.read()\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\pymysql\\connections.py:1156: in read\n    first_packet = self.connection._read_packet()\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\pymysql\\connections.py:725: in _read_packet\n    packet.raise_for_error()\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\pymysql\\protocol.py:221: in raise_for_error\n    err.raise_mysql_exception(self._data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = b'\\xff)\\x04#42000Query was empty'\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack(\"<h\", data[1:3])[0]\n        errval = data[9:].decode(\"utf-8\", \"replace\")\n        errorclass = error_map.get(errno)\n        if errorclass is None:\n            errorclass = InternalError if errno < 1000 else OperationalError\n>       raise errorclass(errno, errval)\nE       pymysql.err.OperationalError: (1065, 'Query was empty')\n\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\pymysql\\err.py:143: OperationalError"}, "attachments": [{"name": "log", "source": "9097294c-93a7-4d6e-b92e-85ffa06a05b2-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'用例ID': '2.0', '模块': '发布订单', '接口名称': '请求获取reorderToken', '请求URL': 'https://test-user-site-api.wanshifu.com/order/publish/info', '前置条件': '', '请求类型': 'POST', '请求参数类型': 'data', '请求参数': '{\"action\":\"create\"}', '预期结果': '', '实际结果': '', '是否运行': 'y', 'headers': '', 'cookies': '', 'status_code': 200.0, '数据库验证': ''}"}], "start": 1643083648819, "stop": 1643083649221, "uuid": "0daf1af2-e605-4fe6-9dc0-5e8273872b23", "historyId": "23d742e21f50334b7eebdd669b7aa9e1", "testCaseId": "55bdc4c937df748c4c3095503da1d147", "fullName": "data.test_excel_case.TestExcel#test_run", "labels": [{"name": "parentSuite", "value": "data"}, {"name": "suite", "value": "test_excel_case"}, {"name": "subSuite", "value": "TestExcel"}, {"name": "host", "value": "test"}, {"name": "thread", "value": "125308-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "data.test_excel_case"}]}